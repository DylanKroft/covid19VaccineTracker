{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/dylankroft/Documents/GitHub/Projects/vaxtrax/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React from 'react';\nimport { useEffect, useState } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport * as d3 from 'd3';\nimport ReactTooltip from 'react-tooltip';\nimport { ComposableMap, Geographies, Geography, Marker, ZoomableGroup } from \"react-simple-maps\";\nconst colorScale = d3.scaleLinear().domain([0, 10, 30]).range(['#CC9AF1', '#804FB3', '#552586']);\n\nconst App = () => {\n  _s();\n\n  const url = \"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.csv\";\n  const geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    csv(url).then(data => {\n      setData(data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"mainContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"top\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Covid-19 Vaccination Tracker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"mapContainer\",\n      children: /*#__PURE__*/_jsxDEV(ComposableMap, {\n        width: \"1200\",\n        style: {\n          width: \"100%\"\n        },\n        \"data-tip\": \"\",\n        projectionConfig: {\n          scale: 200\n        },\n        id: \"map\",\n        children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n          zoom: 1,\n          children: /*#__PURE__*/_jsxDEV(Geographies, {\n            geography: geoUrl,\n            children: ({\n              geographies\n            }) => geographies.map(geo => {\n              const d = data.slice().reverse().find(s => s.iso_code === geo.properties.ISO_A3);\n              return /*#__PURE__*/_jsxDEV(Geography, {\n                onMouseLeave: () => {\n                  setTooltipContent(\"\");\n                },\n                geography: geo,\n                fill: d ? colorScale(d[\"people_vaccinated_per_hundred\"]) : \"#F5F4F6\",\n                style: {\n                  default: {\n                    stroke: \"#808080\",\n                    strokeWidth: 1,\n                    outline: \"none\"\n                  },\n                  hover: {\n                    stroke: \"#808080\",\n                    strokeWidth: 2,\n                    outline: \"none\"\n                  },\n                  pressed: {\n                    stroke: \"#808080\",\n                    strokeWidth: 2,\n                    outline: \"none\"\n                  }\n                }\n              }, geo.rsmKey, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/dylankroft/Documents/GitHub/Projects/vaxtrax/src/App.js"],"names":["React","useEffect","useState","csv","d3","ReactTooltip","ComposableMap","Geographies","Geography","Marker","ZoomableGroup","colorScale","scaleLinear","domain","range","App","url","geoUrl","data","setData","then","width","scale","geographies","map","geo","d","slice","reverse","find","s","iso_code","properties","ISO_A3","setTooltipContent","default","stroke","strokeWidth","outline","hover","pressed","rsmKey"],"mappings":"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","sourcesContent":["import './App.css';\nimport React from 'react';\nimport { useEffect, useState } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport * as d3 from 'd3';\nimport ReactTooltip from 'react-tooltip';\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  ZoomableGroup,\n} from \"react-simple-maps\";\n\nconst colorScale = d3.scaleLinear()\n  .domain([0, 10, 30])\n  .range(['#CC9AF1', '#804FB3', '#552586']);\n\nconst App = () => { \n\n  const url = \"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.csv\";\n  \n  const geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n      csv(url).then((data) => {\n        setData(data);\n      });\n    }, []);\n\n\n\n  return (\n    <div id=\"mainContainer\">\n    <div id=\"top\">\n      <h1>Covid-19 Vaccination Tracker</h1>\n      \n    </div>\n    <div id=\"mapContainer\">\n      <ComposableMap \n        width=\"1200\" \n        style={{ width: \"100%\"}} \n        data-tip=\"\" \n        projectionConfig={{ scale: 200 }} \n        id=\"map\">\n        <ZoomableGroup zoom={1}>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map((geo) => {\n                const d = data.slice().reverse().find((s) => s.iso_code === geo.properties.ISO_A3);\n                return (\n                  <Geography\n                    key={geo.rsmKey}\n          \n                    onMouseLeave={() => {\n                      setTooltipContent(\"\");\n                    }}\n                    geography={geo}\n                    fill={d ? colorScale(d[\"people_vaccinated_per_hundred\"]) : \"#F5F4F6\"}\n                    style={{\n                      default: {\n                        stroke: \"#808080\",\n                        strokeWidth: 1,\n                        outline: \"none\"\n                      },\n                      hover: {\n                        stroke: \"#808080\",\n                        strokeWidth: 2,\n                        outline: \"none\"\n                      },\n                      pressed: {\n                        stroke: \"#808080\",\n                        strokeWidth: 2,\n                        outline: \"none\"\n                      }\n                    }}\n                  />\n                );\n              })\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}