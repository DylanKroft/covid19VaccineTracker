{"version":3,"sources":["components/MapChart.js","App.js","reportWebVitals.js","index.js"],"names":["totVaxed","width","window","screen","height","numberWithCommas","x","toString","replace","document","documentElement","style","setProperty","colorScale","d3","domain","range","MapChart","setTooltipContent","setSelectedCountry","selectedCountry","useState","data","setData","useEffect","csv","then","totVaxedObj","slice","reverse","find","s","iso_code","getElementById","innerHTML","id","data-tip","projection","projectionConfig","scale","center","zoom","translateExtent","geography","geographies","map","geo","properties","ISO_A3","d","undefined","onMouseEnter","NAME","onMouseLeave","fill","default","stroke","strokeWidth","outline","hover","pressed","rsmKey","class","href","App","content","setContent","className","arrowColor","backgroundColor","html","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.10f40db2.chunk.js","sourcesContent":["import './MapChart.css';\nimport React from 'react';\nimport { useEffect, useState } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport * as d3 from 'd3';\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  ZoomableGroup,\n} from \"react-simple-maps\";\n\n\n\nconst width = window.screen.width;\nconst height = window.screen.height;\nconst suffix = \"px\" || '';\nlet totVaxed;\ndocument.documentElement.style.setProperty(`--height`, height + suffix);\ndocument.documentElement.style.setProperty(`--width`, width + suffix);\n\nfunction numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nconst colorScale = d3.scaleLinear()\n  .domain([0, 0.5, 1, 3, 5, 10, 30, 100])\n  .range(['#E3EEF6', '#AAD0EA', '#72B2DE', '#3994D1', '#0076C5', '#006DBE', '#0064B7', '#005AAF']);\n\nconst url = \"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.csv\";\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\nconst MapChart = ({\n  setTooltipContent,\n  setSelectedCountry,\n  selectedCountry,\n}) => { \n\nconst [data, setData] = useState([]);\n\n  useEffect(() => {\n      csv(url).then((data) => {\n        setData(data);\n        const totVaxedObj = data.slice().reverse().find((s) => s.iso_code === \"OWID_WRL\");\n        totVaxed = totVaxedObj[\"people_vaccinated_per_hundred\"];\n        document.documentElement.style.setProperty(`--totVaxed`, totVaxed + \"%\");\n        document.getElementById(\"percentage\").innerHTML = totVaxed\n\n      });\n    }, []);\n\n  return (\n    <div id=\"mainContainer\">\n      <div id=\"top\">\n        <h1 id=\"title\">COVID-19 Vaccination Tracker</h1>\n        <div id=\"progressBarContainer\">\n          <div id=\"progressBar\"></div>\n          <div id=\"popVaxContainer\"> \n            <div id=\"percentage\"> </div>\n            % of the world has received at least one dose</div>\n        </div>\n      </div>\n      <div id=\"mapOuter\">\n        <div id=\"leftBuffer\"></div> \n        <div id=\"mapContainer\">\n        <ComposableMap \n        width=\"1200\" \n        style={{ width: \"100%\"}} \n        data-tip=\"\" \n        projection =\"geoNaturalEarth1\"\n        projectionConfig={{ scale: 200 }} \n        id=\"map\">\n        <ZoomableGroup \n        center = {[15,0]}\n          zoom={1}\n          translateExtent={[\n            [0, 0],\n            [1250, height]\n          ]}>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map((geo) => {\n                if (geo.properties.ISO_A3 === \"ATA\") {\n                  return null\n                }\n                const d = data.slice().reverse().find((s) => s.iso_code === geo.properties.ISO_A3);\n                if (d === undefined) {\n                  return (\n                    <Geography\n                      key={geo.rsmKey}\n  \n                      onMouseEnter={() => {\n                        const { NAME } = geo.properties;\n                        setTooltipContent(\n                          `<span id=\"countryName\">${NAME}</span> <br/><br/> \n                          No Data`);\n                      }}\n  \n                      onMouseLeave={() => {\n                        setTooltipContent(\"\");\n                      }}\n  \n                      geography={geo}\n                      fill={\"#F8F8F8\"}\n                      style={{\n                        default: {\n                          stroke: \"#B8B8B8\",\n                          strokeWidth: 0.75,\n                          outline: \"none\"\n                        },\n                        hover: {\n                          stroke: \"#404040\",\n                          strokeWidth: 2,\n                          outline: \"none\"\n                        },\n                        pressed: {\n                          stroke: \"#404040\",\n                          strokeWidth: 2,\n                          outline: \"none\"\n                        }\n                      }}\n                    />\n                  );\n                } else {\n                  return (\n                    <Geography\n                      key={geo.rsmKey}\n  \n                      onMouseEnter={() => {\n                        const { NAME } = geo.properties;\n                        setTooltipContent(`\n                          <div id=\"info\"><span id=\"countryName\">${NAME}</span> <br/><br/> \n                          <span id=\"l1\">${d[\"people_vaccinated_per_hundred\"]}%</span> <span id=\"l2\">received at least one dose</span> <br/>\n                          <span id=\"l3\">${numberWithCommas(d[\"daily_vaccinations\"])}</span> doses administered daily* <br/>\n                          <span id=\"l4\">${numberWithCommas(d[\"total_vaccinations\"])}</span> doses administered in total<br/>\n                          <span id=\"l5\"><br/>Last updated ${d[\"date\"]} <br/> *Rolling 7-day average</span>\n                          </div>\n                          \n                            `);\n                      }}\n  \n                      onMouseLeave={() => {\n                        setTooltipContent(\"\");\n                      }}\n  \n                      geography={geo}\n                      fill={colorScale(d[\"people_vaccinated_per_hundred\"])}\n                      style={{\n                        default: {\n                          stroke: \"#505050\",\n                          strokeWidth: 0.75,\n                          outline: \"none\"\n                        },\n                        hover: {\n                          stroke: \"#404040\",\n                          strokeWidth: 2,\n                          outline: \"none\"\n                        },\n                        pressed: {\n                          stroke: \"#404040\",\n                          strokeWidth: 2,\n                          outline: \"none\"\n                        }\n                      }}\n                    />\n                  );\n                }\n              })\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n        <ul id=\"key\">\n          <li class=\"myli\" id=\"k1\"><p>0</p></li>\n          <li class=\"myli\" id=\"k2\"><p>.5</p></li>\n          <li class=\"myli\" id=\"k3\"><p>1</p></li>\n          <li class=\"myli\" id=\"k4\"><p>3</p></li>\n          <li class=\"myli\" id=\"k5\"><p>5</p></li>\n          <li class=\"myli\" id=\"k6\"><p>10</p></li>\n          <li class=\"myli\" id=\"k7\"><p>30</p></li>\n          <li class=\"myli\" id=\"k8\"><p>100</p></li>\n          <li id=\"k9\"><p id=\"buffer2\">%</p></li>\n        </ul>\n      </div>\n        <div id=\"rightBuffer\"></div> \n      </div>\n      <div id=\"bottom\">\n        <div id=\"bottomBar\">\n          <a href=\"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.csv\" class=\"bottomInfo\">Data Source</a>\n          <a href=\"https://github.com/DylanKroft/covid19VaccineTracker\" class=\"bottomInfo\">Project Code</a>\n          <a href=\"http://www.dylankroft.com\" class=\"bottomInfo\">Website</a>\n          <a href=\"https://www.buymeacoffee.com/dylankroft\" class=\"bottomInfo\">Support</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MapChart;\n","import './App.css';\nimport MapChart from './components/MapChart.js';\nimport React, { useState } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\n\n\n\nfunction App() {\n\n  const [content, setContent] = useState(\"\");\n\n  return (\n    <div>\n      <MapChart setTooltipContent={setContent} />\n      <ReactTooltip\n        className=\"b\"\n        arrowColor=\"transparent\"\n        backgroundColor=\"transparent\"\n        html={true}\n      >{content}</ReactTooltip>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}